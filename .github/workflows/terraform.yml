# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Add permissions for Workload Identity Federation
    permissions:
      contents: 'read'
      id-token: 'write'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.2  # Or whatever version you're using

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/566479143581/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
          service_account: 'github-actions-sa@affable-beaker-464822-b4.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Generate strong passwords
      - name: Generate Strong Passwords
        id: passwords
        run: |
          # Generate root password (32 chars with special chars)
          ROOT_PASSWORD=$(openssl rand -base64 24 | tr -d "=+/" | cut -c1-32)
          echo "root_password=${ROOT_PASSWORD}" >> $GITHUB_OUTPUT
          
          # Generate app password (32 chars with special chars)
          APP_PASSWORD=$(openssl rand -base64 24 | tr -d "=+/" | cut -c1-32)
          echo "app_password=${APP_PASSWORD}" >> $GITHUB_OUTPUT
          
          echo "Generated strong passwords for CloudSQL instance"

      # Run Terraform commands
      - name: Terraform Init
        run: terraform -chdir=environments/non-prod/dev init

      - name: Import existing CloudSQL instance (if exists)
        run: |
          terraform -chdir=environments/non-prod/dev import google_sql_database_instance.primary projects/affable-beaker-464822-b4/instances/dev-sql-instance || echo "Instance does not exist or already imported"
        continue-on-error: true
        env:
          TF_VAR_sql_root_password: ${{ steps.passwords.outputs.root_password }}
          TF_VAR_sql_app_password: ${{ steps.passwords.outputs.app_password }}

      - name: Terraform Plan
        run: terraform -chdir=environments/non-prod/dev plan
        env:
          TF_VAR_sql_root_password: ${{ steps.passwords.outputs.root_password }}
          TF_VAR_sql_app_password: ${{ steps.passwords.outputs.app_password }}

      - name: Terraform Apply (Auto-approve)
        run: terraform -chdir=environments/non-prod/dev apply -auto-approve
        env:
          TF_VAR_sql_root_password: ${{ steps.passwords.outputs.root_password }}
          TF_VAR_sql_app_password: ${{ steps.passwords.outputs.app_password }}

      # Store passwords securely (optional)
      - name: Store Passwords in GCP Secret Manager
        run: |
          echo "${{ steps.passwords.outputs.root_password }}" | gcloud secrets create cloudsql-root-password --data-file=- --replication-policy="automatic" || echo "Secret already exists"
          echo "${{ steps.passwords.outputs.app_password }}" | gcloud secrets create cloudsql-app-password --data-file=- --replication-policy="automatic" || echo "Secret already exists"
        continue-on-error: true
