name: Terraform Apply

on:
  push:
    branches: [ "main" ]
    paths:
      - 'environments/non-prod/**'

jobs:
  apply:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.2

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/566479143581/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
          service_account: 'github-actions-sa@affable-beaker-464822-b4.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy All Environments
        run: |
          # Get all environments to deploy
          ENVIRONMENTS=$(find environments/non-prod -maxdepth 1 -type d -name "*" | grep -v "^environments/non-prod$" | xargs -I {} sh -c 'if [ -f "{}/main.tf" ]; then basename "{}"; fi' | sort)
          echo "Auto-detected environments: $ENVIRONMENTS"
          
          # Deploy each environment
          for ENV in $ENVIRONMENTS; do
            echo "Deploying $ENV environment..."
            
            ENV_PATH="environments/non-prod/$ENV"
            INSTANCE_NAME="${ENV}-sql-instance"
            
            # Generate passwords
            ROOT_PASSWORD=$(openssl rand -base64 24 | tr -d "=+/" | cut -c1-32)
            APP_PASSWORD=$(openssl rand -base64 24 | tr -d "=+/" | cut -c1-32)
            
            # Terraform commands with lock handling
            terraform -chdir=$ENV_PATH init -lock=false
            terraform -chdir=$ENV_PATH plan -lock=false -var="sql_root_password=$ROOT_PASSWORD" -var="sql_app_password=$APP_PASSWORD"
            terraform -chdir=$ENV_PATH apply -auto-approve -lock=false -var="sql_root_password=$ROOT_PASSWORD" -var="sql_app_password=$APP_PASSWORD"
            
            # Store passwords
            echo "$ROOT_PASSWORD" | gcloud secrets create cloudsql-root-password-$ENV --data-file=- --replication-policy="automatic" || echo "Secret already exists"
            echo "$APP_PASSWORD" | gcloud secrets create cloudsql-app-password-$ENV --data-file=- --replication-policy="automatic" || echo "Secret already exists"
            
            echo " $ENV deployed successfully"
          done

  destroy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout previous commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.before }}

      - name: List environments in previous commit
        id: prev_envs
        run: |
          PREV_ENVS=$(find environments/non-prod -maxdepth 1 -type d -name "*" | grep -v "^environments/non-prod$" | xargs -I {} basename "{}" | sort)
          echo "prev_envs<<EOF" >> $GITHUB_OUTPUT
          echo "$PREV_ENVS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Checkout current commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: List environments in current commit
        id: curr_envs
        run: |
          CURR_ENVS=$(find environments/non-prod -maxdepth 1 -type d -name "*" | grep -v "^environments/non-prod$" | xargs -I {} basename "{}" | sort)
          echo "curr_envs<<EOF" >> $GITHUB_OUTPUT
          echo "$CURR_ENVS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Find deleted environments
        id: find_deleted
        run: |
          PREV_ENVS="${{ steps.prev_envs.outputs.prev_envs }}"
          CURR_ENVS="${{ steps.curr_envs.outputs.curr_envs }}"
          DELETED_ENVS=$(comm -23 <(echo "$PREV_ENVS") <(echo "$CURR_ENVS"))
          echo "Deleted environments: $DELETED_ENVS"
          echo "deleted_envs<<EOF" >> $GITHUB_OUTPUT
          echo "$DELETED_ENVS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Destroy deleted environments
        if: steps.find_deleted.outputs.deleted_envs != ''
        run: |
          for ENV in ${{ steps.find_deleted.outputs.deleted_envs }}; do
            echo "Destroying $ENV environment..."
            # Checkout previous commit to get the deleted environment's code
            git checkout ${{ github.event.before }}
            ENV_PATH="environments/non-prod/$ENV"
            if [ -d "$ENV_PATH" ]; then
              terraform -chdir=$ENV_PATH init -lock=false
              terraform -chdir=$ENV_PATH destroy -auto-approve -lock=false || echo "Destroy failed for $ENV"
            else
              echo "$ENV_PATH does not exist in previous commit, skipping."
            fi
            # Return to current commit for next steps
            git checkout ${{ github.sha }}
          done
        shell: bash
      - name: No environments to destroy
        if: steps.find_deleted.outputs.deleted_envs == ''
        run: echo "No environments to destroy."
