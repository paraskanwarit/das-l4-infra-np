name: Terraform Apply

on:
  push:
    branches: [ "main" ]
    paths:
      - 'environments/non-prod/**'

jobs:
  apply:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.2

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/566479143581/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
          service_account: 'github-actions-sa@affable-beaker-464822-b4.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy All Environments
        run: |
          # Get all environments to deploy
          ENVIRONMENTS=$(find environments/non-prod -maxdepth 1 -type d -name "*" | grep -v "^environments/non-prod$" | xargs -I {} sh -c 'if [ -f "{}/main.tf" ]; then basename "{}"; fi' | sort)
          echo "Auto-detected environments: $ENVIRONMENTS"
          
          # Deploy each environment
          for ENV in $ENVIRONMENTS; do
            echo "Deploying $ENV environment..."
            
            ENV_PATH="environments/non-prod/$ENV"
            INSTANCE_NAME="${ENV}-sql-instance"
            
            # Generate passwords
            ROOT_PASSWORD=$(openssl rand -base64 24 | tr -d "=+/" | cut -c1-32)
            APP_PASSWORD=$(openssl rand -base64 24 | tr -d "=+/" | cut -c1-32)
            
            # Terraform commands with lock handling
            terraform -chdir=$ENV_PATH init -lock=false
            terraform -chdir=$ENV_PATH plan -lock=false -var="sql_root_password=$ROOT_PASSWORD" -var="sql_app_password=$APP_PASSWORD"
            terraform -chdir=$ENV_PATH apply -auto-approve -lock=false -var="sql_root_password=$ROOT_PASSWORD" -var="sql_app_password=$APP_PASSWORD"
            
            # Store passwords
            echo "$ROOT_PASSWORD" | gcloud secrets create cloudsql-root-password-$ENV --data-file=- --replication-policy="automatic" || echo "Secret already exists"
            echo "$APP_PASSWORD" | gcloud secrets create cloudsql-app-password-$ENV --data-file=- --replication-policy="automatic" || echo "Secret already exists"
            
            echo " $ENV deployed successfully"
          done

  destroy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout previous commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.before }}

      - name: List environments in previous commit
        run: |
          echo "Checking previous commit: ${{ github.event.before }}"
          echo "Creating prev_envs.txt first..."
          echo "" > prev_envs.txt
          echo "prev_envs.txt created initially"
          
          ls -la
          echo "environments/non-prod directory exists: $([ -d "environments/non-prod" ] && echo "yes" || echo "no")"
          
          if [ -d "environments/non-prod" ]; then
            echo "environments/non-prod directory found, listing environments..."
            ENVS=$(find environments/non-prod -maxdepth 1 -type d -name "*" | grep -v "^environments/non-prod$" | xargs -I {} basename "{}" | sort)
            echo "Found environments: $ENVS"
            echo "$ENVS" > prev_envs.txt
            echo "Previous environments:"
            cat prev_envs.txt
            echo "prev_envs.txt updated successfully"
          else
            echo "environments/non-prod directory does not exist in previous commit"
            echo "prev_envs.txt remains empty"
          fi
          
          echo "Final check - prev_envs.txt exists: $([ -f "prev_envs.txt" ] && echo "yes" || echo "no")"
          echo "prev_envs.txt contents:"
          cat prev_envs.txt

      - name: Checkout current commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: List environments in current commit
        run: |
          echo "Checking current commit: ${{ github.sha }}"
          ls -la
          if [ -d "environments/non-prod" ]; then
            find environments/non-prod -maxdepth 1 -type d -name "*" | grep -v "^environments/non-prod$" | xargs -I {} basename "{}" | sort > curr_envs.txt
            echo "Current environments:"
            cat curr_envs.txt
            echo "curr_envs.txt created successfully"
          else
            echo "environments/non-prod directory does not exist in current commit"
            touch curr_envs.txt
            echo "Created empty curr_envs.txt"
          fi

      - name: Find deleted environments
        id: find_deleted
        run: |
          echo "Checking if environment files exist..."
          ls -la *.txt || echo "No .txt files found"
          if [ -f "prev_envs.txt" ] && [ -f "curr_envs.txt" ]; then
            echo "Both environment files found, comparing..."
            DELETED_ENVS=$(comm -23 prev_envs.txt curr_envs.txt)
            echo "Deleted environments: $DELETED_ENVS"
            if [ -n "$DELETED_ENVS" ]; then
              echo "deleted_envs=true" >> $GITHUB_OUTPUT
              echo "$DELETED_ENVS" > deleted_envs.txt
              echo "Found deleted environments: $DELETED_ENVS"
            else
              echo "deleted_envs=false" >> $GITHUB_OUTPUT
              echo "No environments were deleted"
            fi
          else
            echo "Environment files not found, no environments to destroy"
            echo "prev_envs.txt exists: $([ -f "prev_envs.txt" ] && echo "yes" || echo "no")"
            echo "curr_envs.txt exists: $([ -f "curr_envs.txt" ] && echo "yes" || echo "no")"
            echo "deleted_envs=false" >> $GITHUB_OUTPUT
          fi

      - name: Destroy deleted environments
        if: steps.find_deleted.outputs.deleted_envs == 'true'
        run: |
          while IFS= read -r ENV; do
            if [ -n "$ENV" ]; then
              echo "Destroying $ENV environment..."
              # Checkout previous commit to get the deleted environment's code
              git checkout ${{ github.event.before }}
              ENV_PATH="environments/non-prod/$ENV"
              if [ -d "$ENV_PATH" ]; then
                terraform -chdir=$ENV_PATH init -lock=false
                terraform -chdir=$ENV_PATH destroy -auto-approve -lock=false || echo "Destroy failed for $ENV"
              else
                echo "$ENV_PATH does not exist in previous commit, skipping."
              fi
              # Return to current commit for next steps
              git checkout ${{ github.sha }}
            fi
          done < deleted_envs.txt

      - name: No environments to destroy
        if: steps.find_deleted.outputs.deleted_envs == 'false'
        run: echo "No environments to destroy."
