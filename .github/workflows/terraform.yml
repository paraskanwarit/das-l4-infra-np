# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
      target_environment:
        description: 'Specific environment to deploy (leave empty for all)'
        required: false
        type: string
        default: ''

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Apply job
  apply:
    runs-on: ubuntu-latest
    
    # Add permissions for Workload Identity Federation
    permissions:
      contents: 'read'
      id-token: 'write'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.2  # Or whatever version you're using

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/566479143581/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
          service_account: 'github-actions-sa@affable-beaker-464822-b4.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Detect and deploy to environments
      - name: Deploy to Environments
        run: |
          # Find all directories in non-prod that contain main.tf
          ENVIRONMENTS=$(find environments/non-prod -maxdepth 1 -type d -name "*" | grep -v "^environments/non-prod$" | xargs -I {} sh -c 'if [ -f "{}/main.tf" ]; then basename "{}"; fi' | sort)
          
          echo "Available environments: $ENVIRONMENTS"
          
          # If specific environment is requested, only deploy to that one
          if [ -n "${{ github.event.inputs.target_environment }}" ]; then
            ENVIRONMENTS="${{ github.event.inputs.target_environment }}"
            echo "Deploying to specific environment: $ENVIRONMENTS"
          fi
          
          # Deploy to each environment
          for ENV in $ENVIRONMENTS; do
            echo "üöÄ Deploying to environment: $ENV"
            
            # Set environment path
            ENV_PATH="environments/non-prod/$ENV"
            INSTANCE_NAME="${ENV}-sql-instance"
            
            # Generate passwords for this environment
            ROOT_PASSWORD=$(openssl rand -base64 24 | tr -d "=+/" | cut -c1-32)
            APP_PASSWORD=$(openssl rand -base64 24 | tr -d "=+/" | cut -c1-32)
            
            echo "Generated passwords for $ENV environment"
            
            # Run Terraform commands
            echo "üìÅ Initializing Terraform for $ENV..."
            terraform -chdir=$ENV_PATH init
            
            echo "üì• Importing existing instance for $ENV (if exists)..."
            terraform -chdir=$ENV_PATH import module.cloudsql.google_sql_database_instance.primary projects/affable-beaker-464822-b4/instances/$INSTANCE_NAME || echo "Instance does not exist or already imported"
            
            echo "üìã Planning Terraform for $ENV..."
            terraform -chdir=$ENV_PATH plan -var="sql_root_password=$ROOT_PASSWORD" -var="sql_app_password=$APP_PASSWORD"
            
            echo "‚úÖ Applying Terraform for $ENV..."
            terraform -chdir=$ENV_PATH apply -auto-approve -var="sql_root_password=$ROOT_PASSWORD" -var="sql_app_password=$APP_PASSWORD"
            
            # Store passwords securely
            echo "üîê Storing passwords for $ENV..."
            echo "$ROOT_PASSWORD" | gcloud secrets create cloudsql-root-password-$ENV --data-file=- --replication-policy="automatic" || echo "Secret already exists"
            echo "$APP_PASSWORD" | gcloud secrets create cloudsql-app-password-$ENV --data-file=- --replication-policy="automatic" || echo "Secret already exists"
            
            echo "‚úÖ Successfully deployed $ENV environment"
            echo "----------------------------------------"
          done
