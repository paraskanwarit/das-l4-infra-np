name: Terraform Destroy

# Controls when the workflow will run
on:
  # Automatic trigger on file deletions
  push:
    branches: [ "main" ]
    paths:
      - 'environments/non-prod/**'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Main destroy job
  destroy:
    runs-on: ubuntu-latest
    
    # Add permissions for Workload Identity Federation
    permissions:
      contents: 'read'
      id-token: 'write'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to detect deletions
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.2

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/566479143581/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
          service_account: 'github-actions-sa@affable-beaker-464822-b4.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Detect and Destroy Deleted Environments
        run: |
          # Get environments from previous commit
          PREVIOUS_ENVIRONMENTS=$(git show HEAD~1:environments/non-prod/ 2>/dev/null | grep -E "^d.*" | awk '{print $NF}' | grep -v "^$" || echo "")
          
          # Get current environments
          CURRENT_ENVIRONMENTS=$(find environments/non-prod -maxdepth 1 -type d -name "*" 2>/dev/null | grep -v "^environments/non-prod$" | xargs -I {} sh -c 'if [ -f "{}/main.tf" ]; then basename "{}"; fi' | sort || echo "")
          
          echo "Previous environments: $PREVIOUS_ENVIRONMENTS"
          echo "Current environments: $CURRENT_ENVIRONMENTS"
          
          # Find deleted environments
          DELETED_ENVIRONMENTS=""
          for env in $PREVIOUS_ENVIRONMENTS; do
            if ! echo "$CURRENT_ENVIRONMENTS" | grep -q "$env"; then
              DELETED_ENVIRONMENTS="$DELETED_ENVIRONMENTS $env"
            fi
          done
          
          if [ -n "$DELETED_ENVIRONMENTS" ]; then
            echo "Auto-destroying deleted environments: $DELETED_ENVIRONMENTS"
            
            # Destroy each environment
            for ENV in $DELETED_ENVIRONMENTS; do
              echo "🗑️ Destroying $ENV environment..."
              
              # Get config from previous commit
              ENV_PATH="environments/non-prod/$ENV"
              mkdir -p /tmp/$ENV
              
              git show HEAD~1:$ENV_PATH/main.tf > /tmp/$ENV/main.tf || echo "Could not get main.tf"
              git show HEAD~1:$ENV_PATH/variables.tf > /tmp/$ENV/variables.tf || echo "Could not get variables.tf"
              git show HEAD~1:$ENV_PATH/terraform.tfvars > /tmp/$ENV/terraform.tfvars || echo "Could not get terraform.tfvars"
              git show HEAD~1:$ENV_PATH/backend.tf > /tmp/$ENV/backend.tf || echo "Could not get backend.tf"
              
              # Terraform destroy
              terraform -chdir=/tmp/$ENV init
              terraform -chdir=/tmp/$ENV plan -destroy -var="sql_root_password=dummy" -var="sql_app_password=dummy"
              terraform -chdir=/tmp/$ENV destroy -auto-approve -var="sql_root_password=dummy" -var="sql_app_password=dummy"
              
              echo "✅ $ENV destroyed successfully"
            done
          else
            echo "No environments to destroy"
          fi 