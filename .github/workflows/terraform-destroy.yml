name: Terraform Destroy

# Controls when the workflow will run
on:
  # Automatic trigger on file deletions
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # Manual trigger for safety
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Specific environment to destroy (leave empty for all)'
        required: false
        type: string
        default: ''
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Safety check job (only for manual triggers)
  safety-check:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Check Confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "❌ Error: You must type 'DESTROY' to confirm destruction"
            exit 1
          fi
          echo "✅ Confirmation received for destruction"

  # Check if we should run destroy (deletions detected)
  check-destroy:
    runs-on: ubuntu-latest
    outputs:
      should-destroy: ${{ steps.check.outputs.should_destroy }}
      environments-to-destroy: ${{ steps.check.outputs.environments_to_destroy }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check if destroy should run
        id: check
        run: |
          # Get list of environments that existed before this commit
          PREVIOUS_ENVIRONMENTS=$(git show HEAD~1:environments/non-prod/ 2>/dev/null | grep -E "^d.*" | awk '{print $NF}' | grep -v "^$" || echo "")
          
          # Get list of current environments
          CURRENT_ENVIRONMENTS=$(find environments/non-prod -maxdepth 1 -type d -name "*" 2>/dev/null | grep -v "^environments/non-prod$" | xargs -I {} sh -c 'if [ -f "{}/main.tf" ]; then basename "{}"; fi' | sort || echo "")
          
          echo "Previous environments: $PREVIOUS_ENVIRONMENTS"
          echo "Current environments: $CURRENT_ENVIRONMENTS"
          
          # Find deleted environments (environments that existed before but not now)
          DELETED_ENVIRONMENTS=""
          for env in $PREVIOUS_ENVIRONMENTS; do
            if ! echo "$CURRENT_ENVIRONMENTS" | grep -q "$env"; then
              DELETED_ENVIRONMENTS="$DELETED_ENVIRONMENTS $env"
            fi
          done
          
          # If manual trigger with specific environment, use that
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.target_environment }}" ]; then
            ENVIRONMENTS_TO_DESTROY="${{ github.event.inputs.target_environment }}"
            echo "should_destroy=true" >> $GITHUB_OUTPUT
            echo "Manual destroy requested for: $ENVIRONMENTS_TO_DESTROY"
          # If there are deleted environments, destroy them
          elif [ -n "$DELETED_ENVIRONMENTS" ]; then
            ENVIRONMENTS_TO_DESTROY="$DELETED_ENVIRONMENTS"
            echo "should_destroy=true" >> $GITHUB_OUTPUT
            echo "Auto-destroying deleted environments: $ENVIRONMENTS_TO_DESTROY"
          # If manual trigger without specific environment, destroy all current
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENVIRONMENTS_TO_DESTROY="$CURRENT_ENVIRONMENTS"
            echo "should_destroy=true" >> $GITHUB_OUTPUT
            echo "Manual destroy requested for all environments: $ENVIRONMENTS_TO_DESTROY"
          else
            echo "should_destroy=false" >> $GITHUB_OUTPUT
            echo "No environments to destroy"
          fi
          
          echo "environments_to_destroy=$(echo $ENVIRONMENTS_TO_DESTROY | tr ' ' '\n' | jq -R . | jq -s .)" >> $GITHUB_OUTPUT
          echo "Environments to destroy: $ENVIRONMENTS_TO_DESTROY"

  # Main destroy job
  destroy:
    needs: [safety-check, check-destroy]
    if: always() && (needs.safety-check.result == 'success' || needs.safety-check.result == 'skipped') && needs.check-destroy.outputs.should-destroy == 'true'
    runs-on: ubuntu-latest
    
    # Add permissions for Workload Identity Federation
    permissions:
      contents: 'read'
      id-token: 'write'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to detect deletions
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.2

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/566479143581/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
          service_account: 'github-actions-sa@affable-beaker-464822-b4.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Destroy environments
      - name: Destroy Environments
        run: |
          ENVIRONMENTS_TO_DESTROY='${{ needs.check-destroy.outputs.environments-to-destroy }}'
          
          # Convert JSON array back to space-separated list
          ENVIRONMENTS=$(echo $ENVIRONMENTS_TO_DESTROY | jq -r '.[]' | tr '\n' ' ')
          
          echo "Starting destruction of environments: $ENVIRONMENTS"
          
          # Destroy each environment
          for ENV in $ENVIRONMENTS; do
            echo "🗑️ Destroying environment: $ENV"
            
            # Set environment path (use previous commit to get the config)
            ENV_PATH="environments/non-prod/$ENV"
            
            # Checkout the previous commit to get the environment config
            echo "📁 Getting environment config from previous commit..."
            git show HEAD~1:$ENV_PATH/main.tf > /tmp/main.tf || echo "Could not get main.tf from previous commit"
            git show HEAD~1:$ENV_PATH/variables.tf > /tmp/variables.tf || echo "Could not get variables.tf from previous commit"
            git show HEAD~1:$ENV_PATH/terraform.tfvars > /tmp/terraform.tfvars || echo "Could not get terraform.tfvars from previous commit"
            git show HEAD~1:$ENV_PATH/backend.tf > /tmp/backend.tf || echo "Could not get backend.tf from previous commit"
            
            # Create temporary directory for the environment
            mkdir -p /tmp/$ENV
            cp /tmp/*.tf /tmp/$ENV/ 2>/dev/null || true
            
            echo "📁 Initializing Terraform for $ENV..."
            terraform -chdir=/tmp/$ENV init
            
            echo "📋 Planning destroy for $ENV..."
            terraform -chdir=/tmp/$ENV plan -destroy -var="sql_root_password=dummy-password" -var="sql_app_password=dummy-password"
            
            echo "💥 Destroying $ENV..."
            terraform -chdir=/tmp/$ENV destroy -auto-approve -var="sql_root_password=dummy-password" -var="sql_app_password=dummy-password"
            
            echo "✅ Successfully destroyed $ENV environment"
            echo "----------------------------------------"
          done 