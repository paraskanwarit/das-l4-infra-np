name: Terraform Destroy

# Controls when the workflow will run
on:
  # Manual trigger only for safety
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa1
          - staging
          - production
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Safety check job
  safety-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check Confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "‚ùå Error: You must type 'DESTROY' to confirm destruction"
            exit 1
          fi
          echo "‚úÖ Confirmation received for destroying ${{ github.event.inputs.environment }} environment"

  # Main destroy job
  destroy:
    needs: safety-check
    runs-on: ubuntu-latest
    
    # Add permissions for Workload Identity Federation
    permissions:
      contents: 'read'
      id-token: 'write'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.2

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/566479143581/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
          service_account: 'github-actions-sa@affable-beaker-464822-b4.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Detect available environments dynamically
      - name: Detect Available Environments
        id: detect_envs
        run: |
          # Find all directories in non-prod that contain main.tf
          NON_PROD_ENVS=$(find environments/non-prod -maxdepth 1 -type d -name "*" | grep -v "^environments/non-prod$" | xargs -I {} sh -c 'if [ -f "{}/main.tf" ]; then basename "{}"; fi' | sort)
          echo "non_prod_envs=$(echo $NON_PROD_ENVS | tr '\n' ' ' | sed 's/ $//')" >> $GITHUB_OUTPUT
          echo "Available non-prod environments: $NON_PROD_ENVS"

      # Set environment path based on input
      - name: Set Environment Path
        id: env_path
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          
          # Check if it's a non-prod environment
          if [ -d "environments/non-prod/$ENVIRONMENT" ] && [ -f "environments/non-prod/$ENVIRONMENT/main.tf" ]; then
            echo "path=environments/non-prod/$ENVIRONMENT" >> $GITHUB_OUTPUT
            echo "‚úÖ Non-prod environment $ENVIRONMENT is valid"
          # Check if it's a production environment
          elif [ -d "environments/production/$ENVIRONMENT" ] && [ -f "environments/production/$ENVIRONMENT/main.tf" ]; then
            echo "path=environments/production/$ENVIRONMENT" >> $GITHUB_OUTPUT
            echo "‚úÖ Production environment $ENVIRONMENT is valid"
          # Check if it's a staging environment
          elif [ -d "environments/staging/$ENVIRONMENT" ] && [ -f "environments/staging/$ENVIRONMENT/main.tf" ]; then
            echo "path=environments/staging/$ENVIRONMENT" >> $GITHUB_OUTPUT
            echo "‚úÖ Staging environment $ENVIRONMENT is valid"
          else
            echo "‚ùå Error: Environment $ENVIRONMENT not found or invalid"
            echo "Available non-prod environments: ${{ steps.detect_envs.outputs.non_prod_envs }}"
            echo "Check for production/staging environments in their respective directories"
            exit 1
          fi

      # Run Terraform commands
      - name: Terraform Init
        run: terraform -chdir=${{ steps.env_path.outputs.path }} init

      - name: Terraform Plan Destroy
        run: terraform -chdir=${{ steps.env_path.outputs.path }} plan -destroy
        env:
          TF_VAR_sql_root_password: "dummy-password"
          TF_VAR_sql_app_password: "dummy-password"

      - name: Terraform Destroy (Auto-approve)
        run: terraform -chdir=${{ steps.env_path.outputs.path }} destroy -auto-approve
        env:
          TF_VAR_sql_root_password: "dummy-password"
          TF_VAR_sql_app_password: "dummy-password"

      - name: Cleanup State Files
        run: |
          rm -rf ${{ steps.env_path.outputs.path }}/.terraform*
          rm -f ${{ steps.env_path.outputs.path }}/terraform.tfstate*
          echo "üßπ Cleaned up Terraform state files"

      - name: Notify Destruction Complete
        run: |
          echo "üóëÔ∏è Successfully destroyed ${{ github.event.inputs.environment }} environment"
          echo "üìÅ Affected path: ${{ steps.env_path.outputs.path }}" 